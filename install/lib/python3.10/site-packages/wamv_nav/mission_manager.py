#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0
#
# MissionInfo( std_msgs/String ) 를 수신 → USV_* 태스크 개수만큼
#   5 m 간격 일렬 스폰 YAML 작성 → SPAWN_FILE env 로 Gazebo launch 호출
#   이후 Boat_i/action 시퀀스 전송
#
import json, yaml, re, math, tempfile, subprocess, os, time, signal, sys
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from px4_uv.msg   import Action
from geometry_msgs.msg import Vector3
from ament_index_python.packages import get_package_share_directory

EARTH_R = 6378137.0
REF_LAT, REF_LON = 35.227108, 126.840301  # ENU 원점

def ll2enu(lat, lon):
    dx = (math.radians(lon - REF_LON) *
          EARTH_R * math.cos(math.radians((lat + REF_LAT)/2)))
    dy = (math.radians(lat - REF_LAT) * EARTH_R)
    return dx, dy

class MissionManager(Node):
    def __init__(self):
        super().__init__('mission_manager')
        self.create_subscription(String, '/MissionInfo',
                                 self.cb_mission, 10)
        self.gz_proc = self.ctrl_proc = None
        self.pub_map = {}
        self.get_logger().info("MissionManager ready — waiting MissionInfo")

    # ────────────────────────────────
    def cb_mission(self, msg: String):
        if self.gz_proc:
            self.get_logger().warn('Mission already running – ignore')
            return

        # JSON or YAML 파싱
        try:
            mission = json.loads(msg.data)
        except Exception:
            mission = yaml.safe_load(msg.data)

        tasks = [t for t in mission.get('tasks', [])
                 if re.fullmatch(r'USV_\d+', t.get('task_id', ''))]
        if not tasks:
            self.get_logger().error('No USV_* tasks')
            return
        n = len(tasks)

        # ── 1) 5 m 간격 스폰-YAML 작성 ──
        models = []
        for i in range(1, n+1):
            models.append({
                'name': f'wavm_{i}',
                'type': 'wamv_garden',            # Garden-용 모델 폴더
                'pose': [(i-1)*5.0, 0.0, 0, 0, 0, 0]
            })
        tmp = tempfile.NamedTemporaryFile(mode='w', suffix='.yaml',
                                          delete=False, encoding='utf-8')
        yaml.safe_dump({'models': models}, tmp)
        tmp_path = tmp.name
        tmp.close()
        self.get_logger().info(f"✓ spawn-file → {tmp_path}")

        # ── 2) Gazebo + VRX launch ──
        env = {**os.environ, 'SPAWN_FILE': tmp_path}
        self.gz_proc = subprocess.Popen(
            ['ros2','launch','wamv_nav','competition.launch.py'],
            env=env, preexec_fn=os.setsid)
        time.sleep(5)

        # ── 3) usv_controller 실행 ──
        self.ctrl_proc = subprocess.Popen(
            ['ros2','run','wamv_nav','usv_controller',
             '--ros-args','-p',f'num_robots:={n}'],
            preexec_fn=os.setsid)
        time.sleep(2)

        # ── 4) 액션 퍼블리셔 준비 ──
        for t in tasks:
            idx = int(t['task_id'].split('_')[1])
            self.pub_map[idx] = self.create_publisher(
                Action, f'/Boat_{idx}/action', 10)

        self.publish_actions(tasks)

    # ────────────────────────────────
    def publish_actions(self, tasks):
        self.get_logger().info('Publishing Action sequences …')
        for task in tasks:
            idx = int(task['task_id'].split('_')[1])
            pub = self.pub_map[idx]

            for a in task['actions']:
                msg = Action()
                msg.action = int(a['action'])
                sp = a.get('setpoint', {})
                msg.setpoint = Vector3(
                    x=float(sp.get('x', 0.0)),
                    y=float(sp.get('y', 0.0)),
                    z=float(sp.get('z', 0.0)))
                for p in ['param1','param2','param3','param4','param5']:
                    setattr(msg, p, float(a.get(p, 0.0)))
                pub.publish(msg)
                time.sleep(0.2)

    # ────────────────────────────────
    def destroy_node(self):
        super().destroy_node()
        for p in (self.ctrl_proc, self.gz_proc):
            if p and p.poll() is None:
                os.killpg(os.getpgid(p.pid), signal.SIGINT)

def main(argv=None):
    rclpy.init(args=argv)
    node = MissionManager()
    try:
        rclpy.spin(node)
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main(sys.argv)

